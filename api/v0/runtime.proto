/* -------------------------------------------------------------------------- *\
 *             Apache 2.0 License Copyright © 2022 The Aurae Authors          *
 *                                                                            *
 *                +--------------------------------------------+              *
 *                |   █████╗ ██╗   ██╗██████╗  █████╗ ███████╗ |              *
 *                |  ██╔══██╗██║   ██║██╔══██╗██╔══██╗██╔════╝ |              *
 *                |  ███████║██║   ██║██████╔╝███████║█████╗   |              *
 *                |  ██╔══██║██║   ██║██╔══██╗██╔══██║██╔══╝   |              *
 *                |  ██║  ██║╚██████╔╝██║  ██║██║  ██║███████╗ |              *
 *                |  ╚═╝  ╚═╝ ╚═════╝ ╚═╝  ╚═╝╚═╝  ╚═╝╚══════╝ |              *
 *                +--------------------------------------------+              *
 *                                                                            *
 *                         Distributed Systems Runtime                        *
 *                                                                            *
 * -------------------------------------------------------------------------- *
 *                                                                            *
 *   Licensed under the Apache License, Version 2.0 (the "License");          *
 *   you may not use this file except in compliance with the License.         *
 *   You may obtain a copy of the License at                                  *
 *                                                                            *
 *       http://www.apache.org/licenses/LICENSE-2.0                           *
 *                                                                            *
 *   Unless required by applicable law or agreed to in writing, software      *
 *   distributed under the License is distributed on an "AS IS" BASIS,        *
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. *
 *   See the License for the specific language governing permissions and      *
 *   limitations under the License.                                           *
 *                                                                            *
\* -------------------------------------------------------------------------- */

// The runtime subsystem is a synchronous and stateless subsystem which
// enables the most fundamental of runtime functionality.
//
// The runtime subsystem is the lowest level of Aurae. Here the runtime
// procedures can be executed in parallel. Each of the procedures defines a
// core paradigm of work.
syntax = "proto3";
package runtime;
option go_package = "github.com/aurae-runtime/client-go/pkg/api/v0/runtime";
import "meta.proto";

//service Cell {
//  rpc Create(Cell) returns (CellStatus) {}
//  rpc Destroy(Cell) returns (CellStatus) {}
//}
//
//service Instance {
//  rpc Create(Instance) returns (InstanceStatus){}
//  rpc Start(Instance) returns (InstanceStatus){}
//  rpc Stop(Instance) returns (InstanceStatus){}
//  rpc Destroy(Instance) returns (InstanceStatus){}
//}
//
//service Pod {
//  rpc Start(Pod) returns (PodStatus) {}
//}
//
//service Exec {
//  rpc Start(Executable) returns (ExecutableStatus) {}
//}
//
//service Spawn {
//  rpc Spawn(SpawnRequest) returns (SpawnResponse) {}
//}

// Core is a synchronous subsystem which defines the main methods for executing and starting
// workloads within an Aurae system.
//
// Core is designed to be called by higher order instance of Aurae, clients, or higher order
// systems in general.
service Core {

  // Run an Executable, the most fundamental runtime process. Akin to shell executing a command.
  //
  // * Executable should exist on system, does not pull from a remote.
  rpc RunExecutable(Executable) returns (ExecutableStatus) {}

  // Spawn a new instance of Aurae, and then create a cell of containers inside the nested Aurae instance.
  //
  // * Accepts an OCI compliant container image, will always pull the image before running.
  // * Assumes Spawn() is successful and is able to bridge to the nested Aurae and the nested cell.
  rpc RunPod(Pod) returns (PodStatus) {}

  // Spawn a short lived (ephemeral) nested virtual instance of Aurae which will terminate on exit.
  // Akin to fork() in Linux, each nested instance inherits properties from the parent but runs an
  // isolated virtual machine with its own kernel and auraed instance.
  //
  // * Inherits a bridged network device from the parent (TAP).
  // * Accepts an OCI compliant container image, will always pull the image before running.
  // * Manages mTLS certificates as necessary.
  rpc Spawn(SpawnRequest) returns (SpawnResponse) {}

  // Run a long lived virtual instance which will persist on exit.
  // Akin to a QEMU virtual machine running with the base auraed as a hypervisor.
  //
  // * Pull from a remote registry (e.g. qcow format)
  // * Accepts a qcow compliant virtual machine image, will always pull the image before running.
  rpc RunVirtualMachine(VirtualMachine) returns (VirtualMachineStatus) {}

  // Run a set of containers in a unique Cgroup with shared namespaces.
  // Akin to running a "container" in its most native way.
  //
  // * Accepts an OCI compliant container image, will always pull the image before running.
  // * Runs directly on the same kernel as the root Auraed.
  rpc RunCell(Cell) returns (CellStatus) {}

}

// Executable is the lowest level of compute that Aurae can execute. A basic process.
message Executable {
  meta.AuraeMeta meta = 1;

  /// Command resembles systemd's ExecStart. This is the shell command (with arguments) you intend to execute.
  string command = 3;

  /// Comment is an arbitrary (user defined) comment used to identify the Executable at runtime.
  string comment = 4;
}

// ExecutableStatus is only returned after a process completes. Because runtime is a synchronous subsystem
// this will only return upon a terminated process.
message ExecutableStatus {
  meta.AuraeMeta meta = 1;
  meta.ProcessMeta proc = 2;
  meta.Status status = 3;

  // The full stdout data.
  string stdout = 4;

  // The full stderr data.
  string stderr = 5;

  // The exit code (return code) of the process after termination.
  string exit_code = 6;
}

// Pod is a group of containers running in a spawned Aurae instance.
message Pod {
  meta.AuraeMeta meta = 1;

  // The cell to create within the spawned Aurae instance.
  Cell cell = 2;
}

// PodStatus is the status of a completed pod and its subsequent containers.
message PodStatus {
  meta.AuraeMeta meta = 1;
  meta.Status status = 3;

  // The response of the necessary spawn for a pod.
  SpawnResponse spawn_response = 4;

  // If the spawn is successful, the nested Aurae instance.
  Instance instance = 5;

  // If the cell creation is successful, the cell of containers running in the spawned Aurae instance.
  CellStatus cell_status = 6;

}

// Container represents is an OCI compliant container image which can be executed.
message Container {
  meta.AuraeMeta meta = 1;

  // OCI compliant image.
  string image = 2;
}

// ContainerStatus is the status of a container after it has been executed.
message ContainerStatus {
  meta.AuraeMeta meta = 1;
  meta.ProcessMeta proc = 2;
  meta.Status status = 3;
}

// A long lived virtual machine which will persist on termination.
message VirtualMachine {
  meta.AuraeMeta meta = 1;
  string name = 2;
  string image = 3;
}

// Status of a terminated virtual machine.
message VirtualMachineStatus {
  meta.AuraeMeta meta = 1;
  meta.Status status = 2;
}

// Parameters for spawning a new nested Aurae instance.
message SpawnRequest {
}

// Response of a spawn.
message SpawnResponse {
}

// A set of containers running on the same kernel as the auraed responding to the request.
message Cell {
  meta.AuraeMeta meta = 1;
  // A set of containers.
  repeated Container containers = 2;
}

message CellStatus {
  meta.AuraeMeta meta = 1;
  meta.Status status = 2;
  repeated ContainerStatus container_statuses = 3;

}

// Instance is a recursive graph structure which holds the meta data for the nested Aurae instances
// running on a machine.
message Instance {
  meta.AuraeMeta meta = 1;
  bool is_root = 2;
  repeated Instance nested_instances = 3;
}

message InstanceStatus {
  meta.AuraeMeta meta = 1;
  meta.Status status = 2;
  repeated ContainerStatus container_statuses = 3;

}
