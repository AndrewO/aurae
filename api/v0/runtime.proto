/* -------------------------------------------------------------------------- *\
 *             Apache 2.0 License Copyright © 2022 The Aurae Authors          *
 *                                                                            *
 *                +--------------------------------------------+              *
 *                |   █████╗ ██╗   ██╗██████╗  █████╗ ███████╗ |              *
 *                |  ██╔══██╗██║   ██║██╔══██╗██╔══██╗██╔════╝ |              *
 *                |  ███████║██║   ██║██████╔╝███████║█████╗   |              *
 *                |  ██╔══██║██║   ██║██╔══██╗██╔══██║██╔══╝   |              *
 *                |  ██║  ██║╚██████╔╝██║  ██║██║  ██║███████╗ |              *
 *                |  ╚═╝  ╚═╝ ╚═════╝ ╚═╝  ╚═╝╚═╝  ╚═╝╚══════╝ |              *
 *                +--------------------------------------------+              *
 *                                                                            *
 *                         Distributed Systems Runtime                        *
 *                                                                            *
 * -------------------------------------------------------------------------- *
 *                                                                            *
 *   Licensed under the Apache License, Version 2.0 (the "License");          *
 *   you may not use this file except in compliance with the License.         *
 *   You may obtain a copy of the License at                                  *
 *                                                                            *
 *       http://www.apache.org/licenses/LICENSE-2.0                           *
 *                                                                            *
 *   Unless required by applicable law or agreed to in writing, software      *
 *   distributed under the License is distributed on an "AS IS" BASIS,        *
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. *
 *   See the License for the specific language governing permissions and      *
 *   limitations under the License.                                           *
 *                                                                            *
\* -------------------------------------------------------------------------- */

syntax = "proto3";
package runtime;
option go_package = "github.com/aurae-runtime/client-go/pkg/api/v0/runtime";

/// Runtime
/// ===
///
/// The Runtime API is a resource-oriented set of services.
/// Resource type API modelled after the "Resource-oriented design" shared by @dominichamon
/// Source: https://google.aip.dev/121

// TODO Pods Service
service Pods{}

// TODO Instances Service
service Instances{}

// TODO Spawn Service
service Spawn{}

/// Runtime Verbs
/// ===
///
/// We call out a set of common verbs to the runtime subsystem.
/// These verbs should be generic enough to use for each resource
/// added to the RPCs and services.
///
/// If functionality can not be implemented by one of these
/// verbs a new verb may be introduced as long as it reasonably
/// applicable to similar RPCs and services.
///
/// * Allocate   Reserve resources, and manage any prerequisites but do not start
/// * Free       Free resources, and destroy any prerequisites that have been started
/// * Start      Run a resource immediately
/// * Stop       Stop a resource immediately
/// * Spawn      A special function that creates a child instance with inherited properties of the parent

/// Cells is the most fundamental isolation boundary for Aurae.
/// A cell is an isolate set of resources of the system which can be
/// used to run workloads.
///
/// A cell is composed of a unique cgroup namespace, and unshared kernel namespaces.
service CellService {

  /// Reserve requested system resources for a new cell.
  /// For cells specifically this will allocate and reserve cgroup resources only.
  rpc Allocate(AllocateCellRequest) returns (AllocateCellResponse) {}

  /// Free up previously requested resources for an existing cell
  rpc Free(FreeCellRequest) returns (FreeCellResponse) {}

  /// Start a new Executable inside of an existing cell. Can be called
  /// in serial to start more than one executable in the same cell.
  rpc Start(StartCellRequest) returns (StartCellResponse) {}

  /// Stop one or more Executables inside of an existing cell.
  /// Can be called in serial to stop/retry more than one executable.
  rpc Stop(StopCellRequest) returns (StopCellResponse) {}
}

/// The most primitive workload in Aurae, a standard executable process.
message Executable {
  string name = 1;
  string command = 2;
  string description = 3;
  string cell_name = 4;
}

/// An isolation resource used to divide a system into smaller resource boundaries.
message Cell {

  /// Resource parameters for control groups (cgroups)
  /// Build on the [cgroups-rs](https://github.com/kata-containers/cgroups-rs) crate.
  /// See [examples](https://github.com/kata-containers/cgroups-rs/blob/main/tests/builder.rs)
  string name = 1;

  /// A comma-separated list of CPU IDs where the task in the control group
  // can run. Dashes between numbers indicate ranges.
  string cpu_cpus = 2;

  ///  Cgroups can be guaranteed a minimum number of "CPU shares"
  ///  when a system is busy.  This does not limit a cgroup's CPU
  ///  usage if the CPUs are not busy.  For further information,
  ///  see Documentation/scheduler/sched-design-CFS.rst (or
  ///  Documentation/scheduler/sched-design-CFS.txt in Linux 5.2
  ///  and earlier).
  ///
  /// Weight of how much of the total CPU time should this control
  //  group get. Note that this is hierarchical, so this is weighted
  //  against the siblings of this control group.
  uint64 cpu_shares = 3;

  /// Same syntax as the cpus field of this structure, but applies to
  //  memory nodes instead of processors.
  string cpu_mems = 4;

  // In one period, how much can the tasks run in nanoseconds.
  int64 cpu_quota = 5;

  /// Linux namespaces to share with the calling process.
  /// If all values are set to false, the resulting cell
  /// will be as isolated as possible.
  ///
  /// Each shared namespace is a potential security risk.
  //  bool ns_share_mount = 10;
  //  bool ns_share_uts = 11;
  //  bool ns_share_ipc = 12;
  //  bool ns_share_pid = 13;
  //  bool ns_share_net = 14;
  //  bool ns_share_cgroup = 15;
}


message AllocateCellRequest {
  Cell cell = 1;
}
message AllocateCellResponse {
  string cell_name = 1;

  /// A bool that will be set to true if the cgroup was created with
  /// cgroup v2 controller.
  bool  cgroup_v2 = 2;
}

message FreeCellRequest {
   string cell_name = 1;
}

message FreeCellResponse {}

message StartCellRequest {
  // TODO Consider set of executables
  Executable executable = 1;
}

message StartCellResponse {
  int64 pid = 1;
  int64 gid = 2;
  int64 uid = 3;
  string user = 4;
  string group = 5;
}

message StopCellRequest {
  string cell_name = 1;
  string executable_name = 2;
}

message StopCellResponse {}