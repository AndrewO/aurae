/* -------------------------------------------------------------------------- *\
 *             Apache 2.0 License Copyright © 2022 The Aurae Authors          *
 *                                                                            *
 *                +--------------------------------------------+              *
 *                |   █████╗ ██╗   ██╗██████╗  █████╗ ███████╗ |              *
 *                |  ██╔══██╗██║   ██║██╔══██╗██╔══██╗██╔════╝ |              *
 *                |  ███████║██║   ██║██████╔╝███████║█████╗   |              *
 *                |  ██╔══██║██║   ██║██╔══██╗██╔══██║██╔══╝   |              *
 *                |  ██║  ██║╚██████╔╝██║  ██║██║  ██║███████╗ |              *
 *                |  ╚═╝  ╚═╝ ╚═════╝ ╚═╝  ╚═╝╚═╝  ╚═╝╚══════╝ |              *
 *                +--------------------------------------------+              *
 *                                                                            *
 *                         Distributed Systems Runtime                        *
 *                                                                            *
 * -------------------------------------------------------------------------- *
 *                                                                            *
 *   Licensed under the Apache License, Version 2.0 (the "License");          *
 *   you may not use this file except in compliance with the License.         *
 *   You may obtain a copy of the License at                                  *
 *                                                                            *
 *       http://www.apache.org/licenses/LICENSE-2.0                           *
 *                                                                            *
 *   Unless required by applicable law or agreed to in writing, software      *
 *   distributed under the License is distributed on an "AS IS" BASIS,        *
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. *
 *   See the License for the specific language governing permissions and      *
 *   limitations under the License.                                           *
 *                                                                            *
\* -------------------------------------------------------------------------- */

syntax = "proto3";
package runtime;
option go_package = "github.com/aurae-runtime/client-go/pkg/api/v0/runtime";

// Resource type API modelled after the "Resource-oriented design"
// Source: https://google.aip.dev/121
// Source: @dominichamon

/// Runtime Verbs
/// ===
///
/// We call out a set of common verbs to the runtime subsystem.
/// These verbs should be generic enough to use for each resource
/// added to the RPCs and services.
///
/// If functionality can not be implemented by one of these
/// verbs a new verb may be introduced as long as it reasonably
/// applicable to similar RPCs and services.
///
/// * Allocate   Reserve resources, and manage any prerequisites but do not start
/// * Free       Free resources, and destroy any prerequisites that have been started
/// * Start      Run a resource immediately
/// * Stop       Stop a resource immediately
/// * Spawn      A special function that creates a child instance with inherited properties of the parent

/// Cells is the most fundamental isolation boundary for Aurae.
/// A cell is an isolate set of resources of the system which can be
/// used to run workloads.
///
/// A cell is composed of a unique cgroup namespace, and unshared kernel namespaces.
service Cells {

  /// Reserve requested system resources for a new cell
  rpc Allocate(CellAllocateRequest) returns (CellAllocateResponse) {}

  /// Free up previously requested resources for an existing cell
  rpc Free(CellFreeRequest) returns (CellFreeResponse) {}

  /// Start a new Executable inside of an existing cell. Can be called
  /// in serial to start more than one executable in the same cell.
  rpc Start(CellStartRequest) returns (CellStartResponse) {}

  /// Stop one or more Executables inside of an existing cell.
  /// Can be called in serial to stop/retry more than one executable.
  rpc Stop(CellStopRequest) returns (CellStopResponse) {}
}

/// The most primitive workload in Aurae, a standard executable process.
message Executable {
  string name = 1;
  string command = 2;
  string description = 3;
  string cell_name = 4;
}

/// A reference to an executable.
message ExecutableReference {
  string cell_name = 1;
  string executable_name = 2;
}

/// An isolation resource used to divide a system into smaller resource boundaries.
message Cell {
  string name = 1;
  ControlGroupOptions cgroup = 2;
  NamespaceShare share = 3;
}

///
message ControlGroupOptions {
  string name = 1;
  string cpus = 2;
  string mems = 3;
  uint64 shares = 4;
  int64 quota = 5;
}

message NamespaceShare {
  bool mount = 1;
  bool uts = 2;
  bool ipc = 3;
  bool pid = 4;
  bool net = 5;
  bool cgroup = 6;
}

message CellAllocateRequest {
  Cell cell = 1;
}
message CellAllocateResponse {
  Cell cell = 1;
}

message CellFreeRequest {
  Cell cell = 1;
}
message CellFreeResponse {}

message CellStartRequest {
  Executable executable = 1;
}
message CellStartResponse {}

message CellStopRequest {
  repeated Executable executables = 1;
}
message CellStopResponse {}
