/* -------------------------------------------------------------------------- *\
 *             Apache 2.0 License Copyright © 2022 The Aurae Authors          *
 *                                                                            *
 *                +--------------------------------------------+              *
 *                |   █████╗ ██╗   ██╗██████╗  █████╗ ███████╗ |              *
 *                |  ██╔══██╗██║   ██║██╔══██╗██╔══██╗██╔════╝ |              *
 *                |  ███████║██║   ██║██████╔╝███████║█████╗   |              *
 *                |  ██╔══██║██║   ██║██╔══██╗██╔══██║██╔══╝   |              *
 *                |  ██║  ██║╚██████╔╝██║  ██║██║  ██║███████╗ |              *
 *                |  ╚═╝  ╚═╝ ╚═════╝ ╚═╝  ╚═╝╚═╝  ╚═╝╚══════╝ |              *
 *                +--------------------------------------------+              *
 *                                                                            *
 *                         Distributed Systems Runtime                        *
 *                                                                            *
 * -------------------------------------------------------------------------- *
 *                                                                            *
 *   Licensed under the Apache License, Version 2.0 (the "License");          *
 *   you may not use this file except in compliance with the License.         *
 *   You may obtain a copy of the License at                                  *
 *                                                                            *
 *       http://www.apache.org/licenses/LICENSE-2.0                           *
 *                                                                            *
 *   Unless required by applicable law or agreed to in writing, software      *
 *   distributed under the License is distributed on an "AS IS" BASIS,        *
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. *
 *   See the License for the specific language governing permissions and      *
 *   limitations under the License.                                           *
 *                                                                            *
\* -------------------------------------------------------------------------- */

syntax = "proto3";
package runtime;
option go_package = "github.com/aurae-runtime/client-go/pkg/api/v0/runtime";

<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
//service Cell {
//  rpc Create(Cell) returns (CellStatus) {}
//  rpc Destroy(Cell) returns (CellStatus) {}
//}
//
//service Instance {
//  rpc Create(Instance) returns (InstanceStatus){}
//  rpc Start(Instance) returns (InstanceStatus){}
//  rpc Stop(Instance) returns (InstanceStatus){}
//  rpc Destroy(Instance) returns (InstanceStatus){}
//}
//
//service Pod {
//  rpc Start(Pod) returns (PodStatus) {}
//}
//
//service Exec {
//  rpc Start(Executable) returns (ExecutableStatus) {}
//}
//
//service Spawn {
//  rpc Spawn(SpawnRequest) returns (SpawnResponse) {}
//}
=======
=======
>>>>>>> 6b8db4d (Adding RPC thoughts from anxiety attack)
=======
>>>>>>> b0115e4 (Adding changes for the folks to review in Discord)
// Resource type API modelled after the "Resource-oriented design"
// Source: https://google.aip.dev/121
// Source: @dominichamon

/// Runtime Verbs
/// ===
///
/// We call out a set of common verbs to the runtime subsystem.
/// These verbs should be generic enough to use for each resource
/// added to the RPCs and services.
///
/// If functionality can not be implemented by one of these
/// verbs a new verb may be introduced as long as it reasonably
/// applicable to similar RPCs and services.
///
/// * Allocate   Reserve resources, and manage any prerequisites but do not start
/// * Free       Free resources, and destroy any prerequisites that have been started
/// * Start      Run a resource immediately
/// * Stop       Stop a resource immediately
/// * Spawn      A special function that creates a child instance with inherited properties of the parent

/// Cells is the most fundamental isolation boundary for Aurae.
/// A cell is an isolate set of resources of the system which can be
/// used to run workloads.
///
/// A cell is composed of a unique cgroup namespace, and unshared kernel namespaces.
service Cells {

  /// Reserve requested system resources for a new cell
  rpc Allocate(CellAllocateRequest) returns (CellAllocateResponse) {}

  /// Free up previously requested resources for an existing cell
  rpc Free(CellFreeRequest) returns (CellFreeResponse) {}

  /// Start a new Executable inside of an existing cell. Can be called
  /// in serial to start more than one executable in the same cell.
  rpc Start(CellStartRequest) returns (CellStartResponse) {}

<<<<<<< HEAD



















<<<<<<< HEAD
>>>>>>> 7e5965c (Working on cells)
=======
=======
//service Cell {
//  rpc Create(Cell) returns (CellStatus) {}
//  rpc Destroy(Cell) returns (CellStatus) {}
//}
//
//service Instance {
//  rpc Create(Instance) returns (InstanceStatus){}
//  rpc Start(Instance) returns (InstanceStatus){}
//  rpc Stop(Instance) returns (InstanceStatus){}
//  rpc Destroy(Instance) returns (InstanceStatus){}
//}
//
//service Pod {
//  rpc Start(Pod) returns (PodStatus) {}
//}
//
//service Exec {
//  rpc Start(Executable) returns (ExecutableStatus) {}
//}
//
//service Spawn {
//  rpc Spawn(SpawnRequest) returns (SpawnResponse) {}
//}
>>>>>>> df4ee54 (Adding RPC thoughts from anxiety attack)
>>>>>>> 6b8db4d (Adding RPC thoughts from anxiety attack)

// Core is a synchronous subsystem which defines the main methods for executing and starting
// workloads within an Aurae system.
//
// Core is designed to be called by higher order instance of Aurae, clients, or higher order
// systems in general.
service Core {

  // Run an Executable, the most fundamental runtime process. Akin to shell executing a command.
  //
  // * Executable should exist on system, does not pull from a remote.
  rpc RunExecutable(Executable) returns (ExecutableStatus) {}

  // Spawn a new instance of Aurae, and then create a cell of containers inside the nested Aurae instance.
  //
  // * Accepts an OCI compliant container image, will always pull the image before running.
  // * Assumes Spawn() is successful and is able to bridge to the nested Aurae and the nested cell.
  rpc RunPod(Pod) returns (PodStatus) {}

  // Spawn a short lived (ephemeral) nested virtual instance of Aurae which will terminate on exit.
  // Akin to fork() in Linux, each nested instance inherits properties from the parent but runs an
  // isolated virtual machine with its own kernel and auraed instance.
  //
  // * Inherits a bridged network device from the parent (TAP).
  // * Accepts an OCI compliant container image, will always pull the image before running.
  // * Manages mTLS certificates as necessary.
  rpc Spawn(SpawnRequest) returns (SpawnResponse) {}

  // Run a long lived virtual instance which will persist on exit.
  // Akin to a QEMU virtual machine running with the base auraed as a hypervisor.
  //
  // * Pull from a remote registry (e.g. qcow format)
  // * Accepts a qcow compliant virtual machine image, will always pull the image before running.
  rpc RunVirtualMachine(VirtualMachine) returns (VirtualMachineStatus) {}

  // Run a set of containers in a unique Cgroup with shared namespaces.
  // Akin to running a "container" in its most native way.
  //
  // * Accepts an OCI compliant container image, will always pull the image before running.
  // * Runs directly on the same kernel as the root Auraed.
  rpc RunCell(Cell) returns (CellStatus) {}
=======
  /// Stop workloads inside of a cell given specific criteria.
  /// Can be called in serial to stop more than one executable in the
  /// same cell.
  rpc Stop(CellStopRequest) returns (CellStopResponse) {}
>>>>>>> b0115e4 (Adding changes for the folks to review in Discord)

}

message Executable {
  string name = 1;
  string command = 2;
  string description = 3;
  string cell_name = 4;
}

message ExecutableReference {
  string cell_name = 1;
  string executable_name = 2;
}

message Cell {
  string name = 1;
  ControlGroupOptions cgroup = 2;
  NamespaceShare share = 3;
}

message ControlGroupOptions {
  string name = 1;
  string cpus = 2;
  string mems = 3;
  uint64 shares = 4;
  int64 quota = 5;
}

message NamespaceShare {
  bool mount = 1;
  bool uts = 2;
  bool ipc = 3;
  bool pid = 4;
  bool net = 5;
  bool cgroup = 6;
}

message CellAllocateRequest {
  Cell cell = 1;
}
message CellAllocateResponse {
  Cell cell = 1;
}

message CellFreeRequest {
  Cell cell = 1;
}
message CellFreeResponse {}

message CellStartRequest {
  Executable executable = 1;
}
message CellStartResponse {}

message CellStopRequest {
  repeated Executable executables = 1;
}
message CellStopResponse {}
